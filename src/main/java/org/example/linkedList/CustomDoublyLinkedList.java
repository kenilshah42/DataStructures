package org.example.linkedList;public class CustomDoublyLinkedList {    private Node head;    private int size;    public CustomDoublyLinkedList() {        this.size = 0;    }    public CustomDoublyLinkedList(Node head) {        this.head = head;        this.size = 0;    }    public void insertFirst(int value){        Node node = new Node(value);        node.next = head;        node.prev = null;        if(head != null){            head.prev = node;        }        head = node;        size++;    }    public void insertLast(int value){        if(size == 0){            insertFirst(value);            return;        }        Node node = new Node(value);        Node last = head;        while(last.next != null){            last = last.next;        }        node.next = null;        node.prev = last;        last.next = node;        size++;    }    public void insert(int value,int index){        if(index == 0){            this.insertFirst(value);            return;        }        if(index == (size-1)){            this.insertLast(value);            return;        }        Node node = new Node(value);        Node before = this.findByIndex(index-1);        node.prev = before;        node.next = before.next;        if(before.next != null){            before.next.prev = node;        }        before.next = node;    }    public Node find(int value){        Node node = head;        while(node != null){            if(node.value == value){                return node;            }            node = node.next;        }        return null;    }    public Node findByIndex(int index){        Node node = head;        for(int i = 0;i<index;i++){            node = node.next;        }        return node;    }    public void display(){        Node node = head;        while(node != null){            System.out.print(node.value + " -> ");            node = node.next;        }        System.out.print("END");    }    private class Node{        private int value;        private Node next;        private Node prev;        public Node(int value) {            this.value = value;        }        public Node(int value, Node next) {            this.value = value;            this.next = next;        }        public Node(Node prev) {            this.prev = prev;        }    }}