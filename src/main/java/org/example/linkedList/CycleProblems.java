package org.example.linkedList;public class CycleProblems {    public static void main(String args[]){    }    //leetcode - 142 - https://leetcode.com/problems/linked-list-cycle-ii/    static ListNode findStartOfCycle(ListNode head){        int length = 0;        ListNode f = head,fast = head;        ListNode s = head,slow = head;        while(fast != null && fast.next != null){            fast = fast.next.next;            slow = slow.next;            if(fast == slow){                do{                    slow = slow.next;                    length++;                }while(slow != fast);                break;            }        }        if(length == 0){            return null;        }        //Now shift s node to length of cycle times        while(length > 0){            s = s.next;            length++;        }        //Now move both nodes until they meet each other        while(f != s){            s = s.next;            f = f.next;        }        return f;    }    private class ListNode {      int val;      ListNode next;      ListNode(int x) {          val = x;          next = null;      }    }}