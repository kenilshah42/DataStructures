package org.example.revised;/** * Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized. * * Return the minimized largest sum of the split. * * A subarray is a contiguous part of the array. * * * * Example 1: * * Input: nums = [7,2,5,10,8], k = 2 * Output: 18 * Explanation: There are four ways to split nums into two subarrays. * The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18. * Example 2: * * Input: nums = [1,2,3,4,5], k = 2 * Output: 9 * Explanation: There are four ways to split nums into two subarrays. * The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9. */public class SplitArrayLargestSum {    public static void main(String args[]){        int[] array = {1,4,4};        int min = 0;        int max = 0;        for(int value : array){            min = Math.max(min,value);            max += value;        }        System.out.println("Find minimized value - "+findMinimized(min,max, 3,array));    }    static int findMinimized(int start,int end, int maxSubArray,int[] array){        if(start == end){            return start;        }        int mid = start + (end-start)/2;        if(isFeasible(mid,maxSubArray,array)){            return findMinimized(start,mid,maxSubArray,array);        }else{            return findMinimized(mid+1,end,maxSubArray,array);        }    }    static boolean isFeasible(int minValue,int maxSubArray,int[] array){        int subArrayCount = 1;        int sum = 0;        for(int value : array){            sum = sum + value;            if(sum > minValue){                sum = value;                subArrayCount++;            }        }        return (subArrayCount <= maxSubArray);    }}