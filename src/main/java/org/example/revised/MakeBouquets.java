package org.example.revised;/** * You are given an integer array bloomDay, an integer m and an integer k. * You want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden. * The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet. * Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.* * * Example 1: * * Input: bloomDay = [1,10,3,10,2], m = 3, k = 1 * Output: 3 * Explanation: Let us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden. * We need 3 bouquets each should contain 1 flower. * After day 1: [x, _, _, _, _]   // we can only make one bouquet. * After day 2: [x, _, _, _, x]   // we can only make two bouquets. * After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3. * Example 2: * * Input: bloomDay = [1,10,3,10,2], m = 3, k = 2 * Output: -1 * Explanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1. * Example 3: * * Input: bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3 * Output: 12 * Explanation: We need 2 bouquets each should have 3 flowers. * Here is the garden after the 7 and 12 days: * After day 7: [x, x, x, x, _, x, x] * We can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent. * After day 12: [x, x, x, x, x, x, x] * It is obvious that we can make two bouquets in different ways. */public class MakeBouquets {    public static void main(String args[]){        int[] array = {7,7,7,7,12,7,7};        int min = array[0];        int max = array[0];        int m = 2;        int k = 3;        for(int value : array){            min = Math.min(value, min);            max = Math.max(value,max);        }        System.out.println("Days - "+ findDays(min,max,m,k,array,-1));    }    static int findDays(int start,int end,int totalBouquets,int neededFlowers,int[] array,int target){        if(start > end){            return target;        }        int mid = start + (end-start)/2;        boolean isFeasible = isFeasibleDay(array,mid,totalBouquets,neededFlowers);        if(isFeasible){            target = mid;            return findDays(start,mid-1,totalBouquets,neededFlowers,array,target);        }else{            return findDays(mid+1,end,totalBouquets,neededFlowers,array,target);        }    }    static boolean isFeasibleDay(int[] flowersBloomDay,int selectedDay,int totalBouquets,int neededFlowers){        int adjCount = 0;        int bouquetCount = 0;        for(int bloomDay : flowersBloomDay){            adjCount = (bloomDay <= selectedDay)?(adjCount+1):0;            if(adjCount == neededFlowers){                bouquetCount++;                adjCount = 0;                if(bouquetCount == totalBouquets){                    return true;                }            }        }        return false;    }}