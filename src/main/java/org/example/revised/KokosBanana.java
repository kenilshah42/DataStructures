package org.example.revised;import java.util.Arrays;/** * Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours. * Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour. * Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return. * Return the minimum integer k such that she can eat all the bananas within h hours. * * Example 1: * * Input: piles = [3,6,7,11], h = 8 * Output: 4 * Example 2: * * Input: piles = [30,11,23,4,20], h = 5 * Output: 30 * Example 3: * * Input: piles = [30,11,23,4,20], h = 6 * Output: 23 */public class KokosBanana {    public static void main(String[] args){        int[] array = {805306368,805306368,805306368};        int start = 1;        int end = Arrays.stream(array).max().getAsInt();        System.out.println("Max - > "+ end);        System.out.println("Efficient K - "+ findK(start,end,array,1000000000,0));    }    static int findK(int start,int end, int[] array,int target,int ans){        if(start > end){            return ans;        }        int mid = start + (end-start)/2;        int totalHours = findTotalHours(mid,array);        if(totalHours > 0 && totalHours <= target){            ans = mid;            return findK(start, mid-1, array, target,ans);        }else {            return findK(mid+1, end, array, target,ans);        }    }    static int findTotalHours(int k,int[] array){        int sum = 0;        for(int pile: array){            sum = sum + (pile/k);            if(pile % k != 0){                sum++;            }        }        return sum;    }}